# -*- coding: utf-8 -*-
"""0703-659026651-Chintakunta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K--dvExQWPCpk6lw15K9mxLgmA2OqSQF
"""

import torch
from torch import nn

class characterLSTM(nn.Module):
  def __init__(self):
    super(characterLSTM,self).__init__()
    self.hidden_dim = 512
    self.lstm = nn.LSTMCell(27,self.hidden_dim)
    self.linear = nn.Linear(self.hidden_dim,27)

  def forward(self,X):
    h,c = torch.randn((X.shape[0],self.hidden_dim),requires_grad=True,device=device),torch.randn((X.shape[0],self.hidden_dim),requires_grad=True,device=device)
    output = torch.empty((X.shape[0],27,11))
    for i in range(0,11):
      h,c = self.lstm(X[:,i,:],(h,c))
      out = self.linear(h)
      output[:,:,i] = out
    return output
  
  def generate_names_argmax(self,letter):
    output = [] 
    output.append(letter)
    letter = ord(letter) - 96
    letter = torch.tensor(letter)
    letter = torch.nn.functional.one_hot(letter,num_classes=27)
    letter = letter.unsqueeze(dim=0)
    h,c = torch.randn((1,self.hidden_dim),device=device),torch.randn((1,self.hidden_dim),device=device)
    for i in range(0,11):
      h,c = self.lstm(letter.type(torch.FloatTensor).to(device),(h,c))
      out = self.linear(h)
      character = torch.argmax(out)
      if character != 0:
        output.append(chr(character + 96))
      letter = torch.nn.functional.one_hot(character,num_classes=27)
      letter = letter.unsqueeze(dim=0)
    st = ""
    output = st.join(output)
    return output 
  
  def generate_names_top5(self,letter):
    output = [] 
    output.append(letter)
    letter = ord(letter) - 96
    letter = torch.tensor(letter)
    letter = torch.nn.functional.one_hot(letter,num_classes=27)
    letter = letter.unsqueeze(dim=0)
    h,c = torch.randn((1,self.hidden_dim),device=device),torch.randn((1,self.hidden_dim),device=device)
    TopK = 5
    for i in range(0,11):
      h,c = self.lstm(letter.type(torch.FloatTensor).to(device),(h,c))
      out = self.linear(h)
      _,idxs = out[-1].topk(TopK)
      idx = torch.randint(0,TopK-1,(1,))
      character = idxs[idx]
      if character != 0:
        output.append(chr(character + 96))
      letter = torch.nn.functional.one_hot(character,num_classes=27)
    st = ""
    output = st.join(output)
    return output

device = "cpu"

model = characterLSTM()
PATH = "/content/0702-659026651-Chintakunta"
model = torch.load(PATH,map_location=torch.device("cpu"))
model.eval()

letter = "a" # change this to generate names with different letters
for i in range(0,20):
  print(model.generate_names_argmax(letter))

for i in range(0,20):
  print(model.generate_names_top5(letter))

